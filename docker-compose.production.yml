version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: bagofwords
      POSTGRES_USER: bagofwords
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bagofwords"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.optimized
    environment:
      - ENVIRONMENT=production
      - BOW_DATABASE_URL=postgresql://bagofwords:${POSTGRES_PASSWORD}@postgres:5432/bagofwords
      - BOW_ENCRYPTION_KEY=${BOW_ENCRYPTION_KEY}
      - BOW_GOOGLE_CLIENT_ID=${BOW_GOOGLE_CLIENT_ID}
      - BOW_GOOGLE_CLIENT_SECRET=${BOW_GOOGLE_CLIENT_SECRET}
      - BOW_SMTP_PASSWORD=${BOW_SMTP_PASSWORD}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        - NUXT_BACKEND_URL=http://backend:8000
        - NUXT_BACKEND_WS_URL=ws://backend:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NUXT_BACKEND_URL=http://backend:8000
      - NUXT_BACKEND_WS_URL=ws://backend:8000

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  nginx_logs:

networks:
  default:
    driver: bridge