"""fix_orphaned_memberships

Revision ID: 5a283be8a36f
Revises: b619d8681865
Create Date: 2025-07-13 17:52:44.631557

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '5a283be8a36f'
down_revision: Union[str, None] = 'b619d8681865'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()

    # Define the tables we'll be working with
    users_table = sa.table('users',
        sa.column('id', sa.String),
        sa.column('email', sa.String),
        sa.column('is_verified', sa.Boolean)
    )
    memberships_table = sa.table('memberships',
        sa.column('user_id', sa.String),
        sa.column('organization_id', sa.String),
        sa.column('email', sa.String)
    )

    # Find all orphaned memberships
    orphaned_memberships = conn.execute(
        sa.select(memberships_table).where(memberships_table.c.user_id.is_(None) & memberships_table.c.email.is_not(None))
    ).fetchall()

    for membership in orphaned_memberships:
        # Find user by email
        user = conn.execute(
            sa.select(users_table).where(users_table.c.email == membership.email)
        ).first()

        if user:
            # Update membership to link to user and clear email
            conn.execute(
                sa.update(memberships_table)
                .where(
                    (memberships_table.c.organization_id == membership.organization_id) &
                    (memberships_table.c.email == membership.email)
                )
                .values(user_id=user.id, email=None)
            )

            # Mark user as verified
            conn.execute(
                sa.update(users_table)
                .where(users_table.c.id == user.id)
                .values(is_verified=True)
            )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # A downgrade is not practical as it would require knowing which users/memberships were affected.
    pass
    # ### end Alembic commands ###
