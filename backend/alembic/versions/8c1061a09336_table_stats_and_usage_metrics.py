"""table stats and usage metrics

Revision ID: 8c1061a09336
Revises: 37fe67baeb37
Create Date: 2025-08-22 19:38:35.019983

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8c1061a09336'
down_revision: Union[str, None] = '37fe67baeb37'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('table_stats',
    sa.Column('org_id', sa.String(length=36), nullable=False),
    sa.Column('report_id', sa.String(length=36), nullable=True),
    sa.Column('data_source_id', sa.String(length=36), nullable=True),
    sa.Column('table_fqn', sa.Text(), nullable=False),
    sa.Column('datasource_table_id', sa.String(length=36), nullable=True),
    sa.Column('usage_count', sa.BigInteger(), nullable=False),
    sa.Column('success_count', sa.BigInteger(), nullable=False),
    sa.Column('weighted_usage_count', sa.Float(), nullable=False),
    sa.Column('pos_feedback_count', sa.BigInteger(), nullable=False),
    sa.Column('neg_feedback_count', sa.BigInteger(), nullable=False),
    sa.Column('weighted_pos_feedback', sa.Float(), nullable=False),
    sa.Column('weighted_neg_feedback', sa.Float(), nullable=False),
    sa.Column('unique_users', sa.BigInteger(), nullable=False),
    sa.Column('trusted_usage_count', sa.BigInteger(), nullable=False),
    sa.Column('failure_count', sa.BigInteger(), nullable=False),
    sa.Column('last_used_at', sa.DateTime(), nullable=True),
    sa.Column('last_feedback_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at_stats', sa.DateTime(), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['datasource_table_id'], ['datasource_tables.id'], ),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], ),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('table_stats', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_table_stats_id'), ['id'], unique=True)
        batch_op.create_index('ix_tabstats_org_report_ds_table', ['org_id', 'report_id', 'data_source_id', 'table_fqn'], unique=True)
        batch_op.create_index('ix_tabstats_table', ['table_fqn'], unique=False)
        batch_op.create_index('ix_tabstats_dstbl', ['datasource_table_id'], unique=False)

    op.create_table('table_usage_events',
    sa.Column('org_id', sa.String(length=36), nullable=False),
    sa.Column('report_id', sa.String(length=36), nullable=True),
    sa.Column('data_source_id', sa.String(length=36), nullable=True),
    sa.Column('step_id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=True),
    sa.Column('table_fqn', sa.Text(), nullable=False),
    sa.Column('datasource_table_id', sa.String(length=36), nullable=True),
    sa.Column('source_type', sa.String(length=32), nullable=False),
    sa.Column('columns', sa.JSON(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('user_role', sa.String(length=64), nullable=True),
    sa.Column('role_weight', sa.Float(), nullable=True),
    sa.Column('used_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['datasource_table_id'], ['datasource_tables.id'], ),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], ),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['step_id'], ['steps.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('step_id', 'table_fqn', name='uq_usage_step_table')
    )
    with op.batch_alter_table('table_usage_events', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_table_usage_events_id'), ['id'], unique=True)
        batch_op.create_index('ix_usage_org_report_table_time', ['org_id', 'report_id', 'table_fqn', 'used_at'], unique=False)
        batch_op.create_index('ix_usage_org_report_ds_time', ['org_id', 'report_id', 'data_source_id', 'used_at'], unique=False)
        batch_op.create_index('ix_usage_table_time', ['table_fqn', 'used_at'], unique=False)
        # Helpful for filtering only successful usages fast
        batch_op.create_index('ix_usage_success', ['org_id', 'report_id', 'table_fqn', 'success', 'used_at'], unique=False)

    op.create_table('table_feedback_events',
    sa.Column('org_id', sa.String(length=36), nullable=False),
    sa.Column('report_id', sa.String(length=36), nullable=True),
    sa.Column('data_source_id', sa.String(length=36), nullable=True),
    sa.Column('step_id', sa.String(length=36), nullable=True),
    sa.Column('completion_feedback_id', sa.String(length=36), nullable=False),
    sa.Column('table_fqn', sa.Text(), nullable=False),
    sa.Column('datasource_table_id', sa.String(length=36), nullable=True),
    sa.Column('feedback_type', sa.String(length=16), nullable=False),
    sa.Column('created_at_event', sa.DateTime(), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['completion_feedback_id'], ['completion_feedbacks.id'], ),
    sa.ForeignKeyConstraint(['datasource_table_id'], ['datasource_tables.id'], ),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], ),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['step_id'], ['steps.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('table_feedback_events', schema=None) as batch_op:
        batch_op.create_index('ix_feedback_org_report_table_time', ['org_id', 'report_id', 'table_fqn', 'created_at_event'], unique=False)
        batch_op.create_index('ix_feedback_org_report_ds_time', ['org_id', 'report_id', 'data_source_id', 'created_at_event'], unique=False)
        batch_op.create_index('ix_feedback_table_time', ['table_fqn', 'created_at_event'], unique=False)
        batch_op.create_index(batch_op.f('ix_table_feedback_events_id'), ['id'], unique=True)

    with op.batch_alter_table('datasource_tables', schema=None) as batch_op:
        batch_op.add_column(sa.Column('centrality_score', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('richness', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('degree_in', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('degree_out', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('entity_like', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('metrics_computed_at', sa.DateTime(), nullable=True))

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table('datasource_tables', schema=None) as batch_op:
        batch_op.drop_column('metrics_computed_at')
        batch_op.drop_column('entity_like')
        batch_op.drop_column('degree_out')
        batch_op.drop_column('degree_in')
        batch_op.drop_column('richness')
        batch_op.drop_column('centrality_score')

    with op.batch_alter_table('table_feedback_events', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_table_feedback_events_id'))
        batch_op.drop_index('ix_feedback_table_time')
        batch_op.drop_index('ix_feedback_org_report_ds_time')
        batch_op.drop_index('ix_feedback_org_report_table_time')

    op.drop_table('table_feedback_events')
    with op.batch_alter_table('table_usage_events', schema=None) as batch_op:
        batch_op.drop_index('ix_usage_success')
        batch_op.drop_index('ix_usage_table_time')
        batch_op.drop_index('ix_usage_org_report_ds_time')
        batch_op.drop_index('ix_usage_org_report_table_time')
        batch_op.drop_index(batch_op.f('ix_table_usage_events_id'))

    op.drop_table('table_usage_events')
    with op.batch_alter_table('table_stats', schema=None) as batch_op:
        batch_op.drop_index('ix_tabstats_table')
        batch_op.drop_index('ix_tabstats_dstbl')
        batch_op.drop_index('ix_tabstats_org_report_ds_table')
        batch_op.drop_index(batch_op.f('ix_table_stats_id'))

    op.drop_table('table_stats')
    # ### end Alembic commands ###
