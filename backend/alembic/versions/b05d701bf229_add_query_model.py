"""add query model

Revision ID: b05d701bf229
Revises: 4e833275cd01
Create Date: 2025-09-10 22:23:19.595575

"""
from typing import Sequence, Union
import uuid

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b05d701bf229'
down_revision: Union[str, None] = '4e833275cd01'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('queries',
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('report_id', sa.String(length=36), nullable=True),
    sa.Column('widget_id', sa.String(length=36), nullable=False),
    sa.Column('default_step_id', sa.String(length=36), nullable=True),
    sa.Column('organization_id', sa.String(length=36), nullable=True),
    sa.Column('user_id', sa.String(length=36), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['default_step_id'], ['steps.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['widget_id'], ['widgets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('queries', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_queries_default_step_id'), ['default_step_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_queries_id'), ['id'], unique=True)
        batch_op.create_index(batch_op.f('ix_queries_organization_id'), ['organization_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_queries_report_id'), ['report_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_queries_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_queries_widget_id'), ['widget_id'], unique=False)

    # Add query_id to steps and foreign key
    with op.batch_alter_table('steps', schema=None) as batch_op:
        batch_op.add_column(sa.Column('query_id', sa.String(length=36), nullable=True))
        batch_op.create_index(batch_op.f('ix_steps_query_id'), ['query_id'], unique=False)
        batch_op.create_foreign_key('fk_steps_query_id_queries', 'queries', ['query_id'], ['id'])

    # Backfill: one query per widget, set steps.query_id and default_step_id
    conn = op.get_bind()
    widgets = conn.execute(sa.text(
        """
        SELECT w.id AS widget_id, w.title AS widget_title, w.report_id AS report_id,
               r.organization_id AS organization_id, r.user_id AS user_id
        FROM widgets w
        LEFT JOIN reports r ON r.id = w.report_id
        """
    )).fetchall()

    # Build rows and bulk insert for performance
    rows = [{
        'id': str(uuid.uuid4()),
        'title': (w.widget_title or ''),
        'report_id': w.report_id,
        'widget_id': w.widget_id,
        'organization_id': w.organization_id,
        'user_id': w.user_id,
    } for w in widgets]

    if rows:
        conn.execute(sa.text(
            """
            INSERT INTO queries (id, title, description, report_id, widget_id, default_step_id,
                                 organization_id, user_id, created_at, updated_at)
            VALUES (:id, :title, NULL, :report_id, :widget_id, NULL,
                    :organization_id, :user_id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """
        ), rows)

        # Map steps to queries in a single statement using scalar subquery
        conn.execute(sa.text(
            """
            UPDATE steps
            SET query_id = (
                SELECT q.id FROM queries q
                WHERE q.widget_id = steps.widget_id
            )
            WHERE query_id IS NULL
            """
        ))

        # Prefer latest successful step per widget
        conn.execute(sa.text(
            """
            UPDATE queries AS q
            SET default_step_id = (
                SELECT s.id
                FROM steps s
                WHERE s.widget_id = q.widget_id AND s.status = 'success'
                ORDER BY s.created_at DESC
                LIMIT 1
            )
            WHERE q.default_step_id IS NULL
            """
        ))

        # Fallback to latest step if none successful
        conn.execute(sa.text(
            """
            UPDATE queries AS q
            SET default_step_id = (
                SELECT s.id
                FROM steps s
                WHERE s.widget_id = q.widget_id
                ORDER BY s.created_at DESC
                LIMIT 1
            )
            WHERE q.default_step_id IS NULL
            """
        ))

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('steps', schema=None) as batch_op:
        batch_op.drop_constraint('fk_steps_query_id_queries', type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_steps_query_id'))
        batch_op.drop_column('query_id')

    with op.batch_alter_table('queries', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_queries_widget_id'))
        batch_op.drop_index(batch_op.f('ix_queries_user_id'))
        batch_op.drop_index(batch_op.f('ix_queries_report_id'))
        batch_op.drop_index(batch_op.f('ix_queries_organization_id'))
        batch_op.drop_index(batch_op.f('ix_queries_id'))
        batch_op.drop_index(batch_op.f('ix_queries_default_step_id'))

    op.drop_table('queries')
    # ### end Alembic commands ###
