# Backend builder: build Python deps in an Alpine environment (musl)
FROM python:3.12-alpine AS backend-builder

# Build deps for compiling wheels (psycopg2, cryptography, etc.)
RUN apk add --no-cache \
    build-base \
    postgresql-dev \
    libffi-dev \
    openssl-dev \
    linux-headers \
    cargo

WORKDIR /app/backend

# Copy backend and clean dev DB if present
COPY ./backend /app/backend
RUN rm -f /app/backend/db/app.db || true

# Create a virtualenv and install backend requirements
ENV VENV_PATH=/opt/venv
RUN python -m venv "$VENV_PATH" && \
    "$VENV_PATH/bin/pip" install --upgrade pip && \
    "$VENV_PATH/bin/pip" install --no-cache-dir --prefer-binary -r /app/backend/requirements_versioned.txt


# Frontend builder: build the Nuxt app with Node 22 on Alpine
FROM node:22-alpine AS frontend-builder

WORKDIR /app

# Copy version/config so Nuxt can access them
COPY ./VERSION /app/VERSION
COPY ./bow-config.yaml /app/bow-config.yaml

# Copy frontend sources
COPY ./frontend /app/frontend
WORKDIR /app/frontend

# Use Corepack Yarn for deterministic installs; build production output
RUN corepack enable && corepack prepare yarn@stable --activate && \
    yarn install --frozen-lockfile && \
    yarn build


# Final runtime image: minimal, secure, and fast
FROM alpine:3.21.3

# Install only runtime dependencies
# - python3/py3-pip to run backend
# - postgresql-libs for libpq (psycopg2 runtime)
# - libstdc++ for compiled extensions
# - nodejs to run Nuxt server output
# - tini as a minimal init for proper signal/child handling
# - bash for existing start.sh
# - openssl/libffi for cryptography runtime
# - ca-certificates for TLS
RUN apk add --no-cache \
      bash \
      curl \
      ca-certificates \
      python3 \
      py3-pip \
      postgresql-libs \
      libstdc++ \
      nodejs \
      tini \
      openssl \
      libffi && \
    update-ca-certificates

# Configure Python venv path on PATH
ENV VENV_PATH=/opt/venv
ENV PATH="$VENV_PATH/bin:$PATH"

# App directory and non-root user
WORKDIR /app
RUN adduser -D -H -s /sbin/nologin appuser && \
    mkdir -p /app/backend/db && \
    chown -R appuser:appuser /app

# Copy backend code and the prebuilt virtualenv
COPY --from=backend-builder /app/backend /app/backend
COPY --from=backend-builder /opt/venv /opt/venv

# Copy frontend build artifacts
COPY --from=frontend-builder /app/frontend /app/frontend

# Copy runtime files
COPY ./VERSION /app/VERSION
COPY ./start.sh /app/start.sh
COPY ./bow-config.yaml /app/bow-config.yaml

# Permissions and env hardening
RUN chmod +x /app/start.sh && chown -R appuser:appuser /app

ENV NODE_ENV=production
ENV ENVIRONMENT=production
ENV PYTHONUNBUFFERED=1
ENV PYTHONIOENCODING=UTF-8

# Only the Nuxt port is exposed to align with your current Dockerfile
EXPOSE 3000

# Drop privileges
USER appuser

# Use tini for proper signal handling; keep your existing startup script
ENTRYPOINT ["/sbin/tini", "--"]
CMD ["/bin/bash", "start.sh"]
